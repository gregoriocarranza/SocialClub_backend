openapi: 3.0.0
info:
  title: Social_web_V1
  description: ''
  version: 1.0.0

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/GregorioCarranzaTorres/Social_web_V1/1.0.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ------------------------------Schemas------------------------------

  schemas:
    GeneralResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful
          example: true
        message:
          type: string
          description: Descriptive message of the response
          example: 'Email sent successfully'
        data:
          type: object
          description: Response object (if any) or null

    UserData:
      type: object
      properties:
        userUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        nickname:
          type: string
          example: 'johndoe123'
        bio:
          type: string
          example: 'Passionate technology developer.'
        followers:
          type: array
          items:
            $ref: '#/components/schemas/ShortUserData'
        following:
          type: array
          items:
            $ref: '#/components/schemas/ShortUserData'
        level:
          type: integer
          example: 10
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'

    ShortUserData:
      type: object
      properties:
        userUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        nickname:
          type: string
          example: 'johndoe123'
        profileUserImage:
          type: string
          example: 'https://example.com/images/profile.jpg'
          description: 'URL of the userÂ´s profile image.'
        level:
          type: integer
          example: 10

    Post:
      type: object
      properties:
        postUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        title:
          type: string
          example: 'Nature Adventures'
        text:
          type: string
          example: 'Exploring the vast forests!'
        multimediaUrl:
          type: string
          example: 'https://example.com/image.jpg'
        commentsCount:
          type: integer
          example: 5
        likesCount:
          type: integer
          example: 120
        creationDate:
          type: string
          format: date-time
          example: '2021-07-16T19:20:30Z'

    Ad:
      type: object
      properties:
        adUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        ownerUser:
          $ref: '#/components/schemas/ShortUserData'
        companyName:
          type: string
          example: 'Adventure Works'
          description: 'Name of the company.'
        companyUrl:
          type: string
          example: 'https://adventure-works.com'
          description: 'Website URL of the company.'
        image:
          type: string
          example: 'https://example.com/image.jpg'
          description: 'URL of the ad image.'
        likesCount:
          type: integer
          example: 120
          description: 'Number of likes the ad has received.'
        commentsCount:
          type: integer
          example: 30
          description: 'Number of comments on the ad.'
        startDate:
          type: integer
          example: 1640995200
          description: 'Start date of the ad display in Unix timestamp.'
        endDate:
          type: integer
          example: 1643673599
          description: 'End date of the ad display in Unix timestamp.'
    Comment:
      type: object
      properties:
        commentUuid:
          type: string
          format: uuid
          description: Unique identifier for the comment.
        userUuid:
          type: string
          format: uuid
          description: Unique identifier of the user who made the comment.
        postUuid:
          type: string
          format: uuid
          description: Unique identifier of the post to which the comment belongs.
        text:
          type: string
          description: Text of the comment.
        date:
          type: string
          format: date-time
          description: Date and time the comment was made.
      # required:
      #   - userUuid
      #   - postUuid
      #   - text
      #   - date

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
          description: 'Current page number'
        limit:
          type: integer
          example: 10
          description: 'Number of posts per page'
        count:
          type: integer
          example: 10
          description: 'Number of posts returned on the current page'
        totalCount:
          type: integer
          example: 50
          description: 'Total number of posts available'
        totalPages:
          type: integer
          example: 5
          description: 'Total number of pages available'
      required:
        - page
        - limit
        - count
        - totalCount
        - totalPages

    NotFound-404:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: 'Error code refered in our sistem'
          example: 40401
        message:
          type: string
          description: 'Description of the validation error'
          example: 'Invalid input data'
        timestamp:
          type: integer
          description: 'Unix timestamp of when the error occurred'
          example: 1633017600
      required:
        - code
        - message
        - example
        - timestamp

    ValidationError-400:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: 'HTTP error code'
          example: 400
        message:
          type: string
          description: 'Description of the validation error'
          example: 'Invalid input data'
        errors:
          type: object
          description: 'Detailed validation errors for specific fields'
          additionalProperties:
            type: string
          example:
            title: 'Title is required'
            text: 'Text must be at least 10 characters long'
        timestamp:
          type: integer
          description: 'Unix timestamp of when the error occurred'
          example: 1633017600
      required:
        - code
        - message
        - errors
        - timestamp

    UnauthorizedError-401:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: 'HTTP error code'
          example: 401
        message:
          type: string
          description: 'Error description indicating lack of authorization'
          example: 'Unauthorized'
        timestamp:
          type: integer
          description: 'Unix timestamp of when the error occurred'
          example: 1633017600
      required:
        - code
        - message
        - timestamp

    ForbiddenError-403:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: 'HTTP error code'
          example: 403
        message:
          type: string
          description: 'Error indicating the user does not have permission'
          example: 'User does not have permission to create a post'
        timestamp:
          type: integer
          description: 'Unix timestamp of when the error occurred'
          example: 1633017600
      required:
        - code
        - message
        - timestamp

    InternalServerError-500:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: 'HTTP error code'
          example: 500
        message:
          type: string
          description: 'Generic server error message'
          example: 'An unexpected error occurred on the server'
        timestamp:
          type: integer
          description: 'Unix timestamp of when the error occurred'
          example: 1633017600
      required:
        - code
        - message
        - timestamp

tags:
  - name: 'Auth'
    description: 'Operations related to authentication'
  - name: 'User'
    description: 'Operations related to users'
  - name: 'Following/Followers'
    description: 'Operations related to Followers/Following'
  - name: 'Posts'
    description: 'Operations related to posts'
  - name: 'Comments'
    description: 'Operations related to Comments'

paths:
  #------------------------ Auth Routes ------------------------#
  /auth/login:
    post:
      tags:
        - 'Auth'
      summary: 'User login'
      description: 'Authenticates the user and returns a JWT.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@example.com'
                password:
                  type: string
                  example: 'securePassword123'
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'Resource not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  /auth/register:
    post:
      tags:
        - 'Auth'
      summary: 'User registration'
      description: 'Registers a new user.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@example.com'
                firstname:
                  type: string
                  example: 'John'
                lastname:
                  type: string
                  example: 'Doe'
                password:
                  type: string
                  example: 'securePassword123'
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError-400'
  /auth/logout:
    post:
      tags:
        - 'Auth'
      summary: 'User logout'
      description: 'Logs out the user.'
      responses:
        '200':
          description: 'Session closed'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  /auth/forgot_password:
    post:
      tags:
        - 'Auth'
      summary: 'Send password reset email'
      description: 'Sends an email to reset the userÂ´s password.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@example.com'
      responses:
        '200':
          description: 'Email sent successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'Resource not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '400':
          description: 'Error in the provided email'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError-400'

  /auth/reset_password:
    post:
      tags:
        - 'Auth'
      summary: 'Reset password'
      description: 'Allows the user to reset their password using a reset token.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contraseÃ±a:
                  type: string
                  example: 'newSecurePassword123'
      responses:
        '200':
          description: 'Password reset successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'Resource not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  #------------------------ User Routes ------------------------#

  /user:
    get:
      tags:
        - 'User'
      summary: 'Search for users by name, last name, or nickname'
      description: 'Allows searching for users in the system by their name, last name, or nickname. Supports pagination for large result sets.'
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
          example: 'Paul'
        - name: lastName
          in: query
          required: false
          schema:
            type: string
          example: 'Sundays'
        - name: nickname
          in: query
          required: false
          schema:
            type: string
          example: 'Paul_Sundays69'
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: 'Page number for user pagination.'
        - name: count
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: 'Number of users to retrieve per page.'
      responses:
        '200':
          description: 'User information retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User found successfully'
                  data:
                    $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'User not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  /user/me:
    get:
      tags:
        - 'User'
      summary: 'Obtener usuario por JWT'
      description: 'Devuelve la informaciÃ³n del usuario asociado al JWT.'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'InformaciÃ³n del usuario obtenida exitosamente'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'InformaciÃ³n del usuario obtenida exitosamente'
                  data:
                    $ref: '#/components/schemas/UserData'
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  /user/{userUuid}:
    get:
      tags:
        - 'User'
      summary: 'Obtener usuario por UUID'
      description: 'Devuelve la informaciÃ³n del usuario por su UUID.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'InformaciÃ³n del usuario obtenida exitosamente'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'InformaciÃ³n del usuario obtenida exitosamente'
                  data:
                    $ref: '#/components/schemas/UserData'
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

        '404':
          description: 'Recurso no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
    put:
      tags:
        - 'User'
      summary: 'Actualizar mis datos de usuario'
      description: 'Permite actualizar los datos de perfil del usuario autenticado.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: 'John'
                apellido:
                  type: string
                  example: 'Doe'
                nickname:
                  type: string
                  example: 'johndoe123'
                biografÃ­a:
                  type: string
                  example: 'Desarrollador apasionado de la tecnologÃ­a.'
                genero:
                  type: string
                  example: 'Masculino'
                fotoPerfil:
                  type: string
                  example: 'https://example.com/perfil.jpg'
                fotoPortada:
                  type: string
                  example: 'https://example.com/portada.jpg'
      responses:
        '200':
          description: 'InformaciÃ³n del usuario obtenida exitosamente'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Datos del usuario actualizados exitosamente'
                  data:
                    $ref: '#/components/schemas/UserData'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError-400'
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
    delete:
      tags:
        - User
      description: Elimina el usuario identificado por UUID.
      parameters:
        - example: 66a3e747-2065-49ed-bb62-50ac084742bf
          in: path
          name: userUuid
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                SuccessfulResponse:
                  value:
                    message: Usuario eliminado exitosamente
                    success: true
              schema:
                $ref: '#/components/schemas/GeneralResponse'
          description: Usuario eliminado exitosamente
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
          description: No autorizado
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
          description: Usuario no encontrado
      summary: Eliminar usuario por UUID

  /user/{userUuid}/followers:
    get:
      tags:
        - 'Following/Followers'
      summary: 'Obtener lista de seguidores'
      description: 'Devuelve la lista de seguidores de un usuario por su UUID.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'InformaciÃ³n del usuario obtenida exitosamente'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Usuario encontrado exitosamente'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

    delete:
      tags:
        - 'Following/Followers'
      summary: 'Eliminar un seguidor'
      description: 'Elimina a un usuario de la lista de seguidores.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Seguidor eliminado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Seguidor eliminado exitosamente'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  /user/{userUuid}/following:
    get:
      tags:
        - 'Following/Followers'
      summary: 'Obtener lista de seguidos'
      description: 'Devuelve la lista de usuarios seguidos por el usuario por su UUID.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Lista de seguidos obtenida'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Usuario encontrado exitosamente'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

    put:
      tags:
        - 'Following/Followers'
      summary: 'Agregar o quitar follow a un usuario'
      description: 'Agrega a un usuario a la lista de seguidos.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Usuario seguido exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Usuario seguido exitosamente'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  /user/{userUuid}/favorites:
    get:
      tags:
        - 'Following/Followers'
      summary: 'Obtener lista de usuarios favoritos'
      description: 'Devuelve la lista de usuarios favoritos por el usuario por su UUID.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Lista de seguidos obtenida'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Usuario encontrado exitosamente'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

    put:
      tags:
        - 'Following/Followers'
      summary: 'Agregar o eliminar a un usuario de favoritos'
      description: 'Agrega o elimina a un usuario de la lista de favoritos mediante su UUID'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: 12345
      responses:
        '200':
          description: 'Favoritos actualizados exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Favoritos actualizados exitosamente'
                    data:
                      favoritos:
                        - 'user1'
                        - 'user2'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  #------------------------ posts Routes ------------------------#
  /posts:
    get:
      tags:
        - 'Posts'
      summary: 'Get all posts'
      description: 'Returns a paginated list of posts.'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: 'Page number for feed pagination.'
        - name: count
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: 'Page number for feed pagination.'
      responses:
        '200':
          description: 'Posts list retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Posts retrieved successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

    post:
      tags:
        - 'Posts'
      summary: 'Create a post'
      description: 'Create a post and returns it.'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Title of the post.'
                  example: 'Nature Adventures'
                text:
                  type: string
                  description: 'Description of the content.'
                  example: 'Exploring the vast forests!'
                multimediaFile:
                  type: string
                  format: binary
                  description: 'Upload your image file here. Accepts .jpg, .png up to 5MB.'
      responses:
        '200':
          description: 'Posts created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Posts created successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  /posts/{postUuid}:
    get:
      tags:
        - 'Posts'
      summary: 'Get a post'
      description: 'Returns a post by its UUID'
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Post retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Post retrieved successfully'
                    data:
                      postUuid: 123
                      title: 'Adventures in the wild'
                      text: 'Exploring the vast forests!'
                      multimediaUrl: 'https://example.com/image.jpg'
                      commentsCount: 5
                      likesCount: 120
                      creationDate: '2021-07-16T19:20:30Z'
        '404':
          description: 'Post not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Post not found'
                    timestamp: 1633017600
    put:
      tags:
        - 'Posts'
      summary: 'Update a post'
      description: 'Allows the user to update an existing post.'
      security:
        - bearerAuth: []
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: 'Post updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Post updated successfully'
                    data:
                      postUuid: 123
                      title: 'Adventures in the wild'
                      text: 'Exploring the vast forests!'
                      multimediaUrl: 'https://example.com/image.jpg'
                      commentsCount: 5
                      likesCount: 120
                      creationDate: '2021-07-16T19:20:30Z'
        '404':
          description: 'Post not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Post not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

    delete:
      tags:
        - 'Posts'
      summary: 'Delete a post'
      description: 'Allows the user to delete an existing post.'
      security:
        - bearerAuth: []
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Post deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Post deleted successfully'
        '404':
          description: 'Post not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  /posts/feed:
    get:
      tags:
        - 'Posts'
      summary: 'Get the feed'
      description: 'Returns a paginated list of posts for the userâs feed.'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: 'Page number for feed pagination.'
        - name: count
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: 'Page number for feed pagination.'
      responses:
        '200':
          description: 'Feed list retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Feed retrieved successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

  #------------------------ comments Routes ------------------------#

  /comments/{postUuid}:
    get:
      tags:
        - 'Comments'
      summary: 'Get all the comments'
      description: 'Returns a paginated list of comments.'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postUuid
          required: true
          schema:
            type: string
            format: uuid
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
          description: Unique identifier for the post.
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: 'Page number for comments pagination.'
        - name: count
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: 'Page number for comments pagination.'
      responses:
        '200':
          description: 'PostÂ´s comments list retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'PostÂ´s comments retrieved successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
    post:
      tags:
        - 'Comments'
      summary: Create a new comment.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      parameters:
        - in: path
          name: postUuid
          required: true
          schema:
            type: string
            format: uuid
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
          description: Unique identifier for the post.
      responses:
        '200':
          description: Comment successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Comment successfully created.'
                  data:
                    $ref: '#/components/schemas/Comment'

        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError-400'

  /comments/{commentUuid}:
    get:
      tags:
        - 'Comments'
      summary: Retrieve a comment by its ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentUuid
          required: true
          schema:
            type: string
            format: uuid
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
          description: Unique identifier for the comment.
      responses:
        '200':
          description: 'Comment information successfully retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Comment information successfully retrieved'
                  data:
                    $ref: '#/components/schemas/Comment'
        '404':
          description: 'Comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'

    put:
      tags:
        - 'Comments'
      summary: Update an existing comment.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentUuid
          required: true
          schema:
            type: string
            format: uuid
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
          description: Unique identifier for the comment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Comment information updated successfully'
                  data:
                    $ref: '#/components/schemas/Comment'
        '404':
          description: 'Comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'

    delete:
      tags:
        - 'Comments'
      summary: Delete a comment.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentUuid
          required: true
          schema:
            type: string
            format: uuid
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
          description: Unique identifier for the comment.
      responses:
        '200':
          description: Comment deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Comment deleted successfully.'
        '404':
          description: 'Comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
