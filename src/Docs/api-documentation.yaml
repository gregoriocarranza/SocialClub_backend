openapi: 3.0.0
info:
  title: Social_web_V1
  description: ''
  version: 1.0.0

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/GregorioCarranzaTorres/Social_web_V1/1.0.0
  - description: SwaggerHub API Auto Mocking V2
    url: https://virtserver.swaggerhub.com/GregorioCarranzaTorres/Social_web_V2/2.0.0/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ------------------------------Schemas------------------------------

  schemas:
    GeneralResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful
          example: true
        message:
          type: string
          description: Descriptive message of the response
          example: 'Email sent successfully'
        data:
          type: object
          description: Response object (if any) or null

    UserData:
      type: object
      properties:
        userUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        nickname:
          type: string
          example: 'johndoe123'
        bio:
          type: string
          example: 'Passionate technology developer.'
        followers:
          type: array
          items:
            $ref: '#/components/schemas/ShortUserData'
        following:
          type: array
          items:
            $ref: '#/components/schemas/ShortUserData'
        level:
          type: integer
          example: 10
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'

    ShortUserData:
      type: object
      properties:
        userUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        nickname:
          type: string
          example: 'johndoe123'
        profileUserImage:
          type: string
          example: 'https://example.com/images/profile.jpg'
          description: 'URL of the user´s profile image.'
        level:
          type: integer
          example: 10

    Post:
      type: object
      properties:
        postUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        title:
          type: string
          example: 'Nature Adventures'
        text:
          type: string
          example: 'Exploring the vast forests!'
        multimediaUrl:
          type: string
          example: 'https://example.com/image.jpg'
        commentsCount:
          type: integer
          example: 5
        likesCount:
          type: integer
          example: 120
        creationDate:
          type: string
          format: date-time
          example: '2021-07-16T19:20:30Z'

    Ad:
      type: object
      properties:
        adUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        ownerUser:
          $ref: '#/components/schemas/ShortUserData'
        companyName:
          type: string
          example: 'Adventure Works'
          description: 'Name of the company.'
        companyUrl:
          type: string
          example: 'https://adventure-works.com'
          description: 'Website URL of the company.'
        image:
          type: string
          example: 'https://example.com/image.jpg'
          description: 'URL of the ad image.'
        likesCount:
          type: integer
          example: 120
          description: 'Number of likes the ad has received.'
        commentsCount:
          type: integer
          example: 30
          description: 'Number of comments on the ad.'
        startDate:
          type: integer
          example: 1640995200
          description: 'Start date of the ad display in Unix timestamp.'
        endDate:
          type: integer
          example: 1643673599
          description: 'End date of the ad display in Unix timestamp.'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
          description: 'Current page number'
        limit:
          type: integer
          example: 10
          description: 'Number of posts per page'
        count:
          type: integer
          example: 10
          description: 'Number of posts returned on the current page'
        totalCount:
          type: integer
          example: 50
          description: 'Total number of posts available'
        totalPages:
          type: integer
          example: 5
          description: 'Total number of pages available'

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: HTTP error code or custom code
          example: 400
        message:
          type: string
          description: Error description
          example: 'Bad Request'
        timestamp:
          type: integer
          description: Unix timestamp format
          example: 1633017600

security:
  - bearerAuth: []

tags:
  - name: 'Auth'
    description: 'Operations related to authentication'
  - name: 'User'
    description: 'Operations related to users'
  - name: 'Following/Followers'
    description: 'Operations related to Followers/Following'
  - name: 'Posts'
    description: 'Operations related to posts'

paths:
  #------------------------ Auth Routes ------------------------#
  /auth/login:
    post:
      tags:
        - 'Auth'
      summary: 'User login'
      description: 'Authenticates the user and returns a JWT.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@example.com'
                password:
                  type: string
                  example: 'securePassword123'
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'Resource not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Resource not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'Unauthorized'
                    timestamp: 1633017600

  /auth/register:
    post:
      tags:
        - 'Auth'
      summary: 'User registration'
      description: 'Registers a new user.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@example.com'
                firstname:
                  type: string
                  example: 'John'
                lastname:
                  type: string
                  example: 'Doe'
                password:
                  type: string
                  example: 'securePassword123'
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InternalServerErrorExample:
                  value:
                    success: false
                    code: 500
                    message: 'Internal server error'
                    timestamp: 1633017600
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                BadRequestExample:
                  value:
                    success: false
                    code: 400
                    message: 'Bad request'
                    timestamp: 1633017600

  /auth/logout:
    post:
      tags:
        - 'Auth'
      summary: 'User logout'
      description: 'Logs out the user.'
      responses:
        '200':
          description: 'Session closed'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'Unauthorized'
                    timestamp: 1633017600

  /auth/forgot_password:
    post:
      tags:
        - 'Auth'
      summary: 'Send password reset email'
      description: 'Sends an email to reset the user´s password.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@example.com'
      responses:
        '200':
          description: 'Email sent successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'Resource not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Resource not found'
                    timestamp: 1633017600
        '400':
          description: 'Error in the provided email'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 400
                    message: 'Unauthorized'
                    timestamp: 1633017600

  /auth/reset_password:
    post:
      tags:
        - 'Auth'
      summary: 'Reset password'
      description: 'Allows the user to reset their password using a reset token.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contraseña:
                  type: string
                  example: 'newSecurePassword123'
      responses:
        '200':
          description: 'Password reset successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'Resource not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Resource not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'Unauthorized'
                    timestamp: 1633017600

  #------------------------ User Routes ------------------------#

  /user/jwt:
    get:
      tags:
        - 'User'
      summary: 'Obtener usuario por JWT'
      description: 'Devuelve la información del usuario asociado al JWT.'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Información del usuario obtenida exitosamente'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Información del usuario obtenida exitosamente'
                  data:
                    $ref: '#/components/schemas/UserData'
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600

  /user/{userUuid}:
    get:
      tags:
        - 'User'
      summary: 'Obtener usuario por UUID'
      description: 'Devuelve la información del usuario por su UUID.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Información del usuario obtenida exitosamente'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Información del usuario obtenida exitosamente'
                  data:
                    $ref: '#/components/schemas/UserData'
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600
        '404':
          description: 'Recurso no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Recurso no encontrado'
                    timestamp: 1633017600
    put:
      tags:
        - 'User'
      summary: 'Actualizar mis datos de usuario'
      description: 'Permite actualizar los datos de perfil del usuario autenticado.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: 'John'
                apellido:
                  type: string
                  example: 'Doe'
                nickname:
                  type: string
                  example: 'johndoe123'
                biografía:
                  type: string
                  example: 'Desarrollador apasionado de la tecnología.'
                genero:
                  type: string
                  example: 'Masculino'
                fotoPerfil:
                  type: string
                  example: 'https://example.com/perfil.jpg'
                fotoPortada:
                  type: string
                  example: 'https://example.com/portada.jpg'
      responses:
        '200':
          description: 'Información del usuario obtenida exitosamente'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Datos del usuario actualizados exitosamente'
                  data:
                    $ref: '#/components/schemas/UserData'
        '400':
          description: 'Solicitud inválida'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                BadRequestExample:
                  value:
                    success: false
                    code: 400
                    message: 'Solicitud inválida'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600

  /user/search:
    get:
      tags:
        - 'User'
      summary: 'Buscar a un usuario por nickname'
      description: 'Busca a un usuario en el sistema mediante su nickname.'
      parameters:
        - name: nickname
          in: query
          required: true
          schema:
            type: string
          example: 'johndoe123'
      responses:
        '200':
          description: 'Información del usuario obtenida exitosamente'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Usuario encontrado exitosamente'
                  data:
                    $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600

  /user/{userUuid}/followers:
    get:
      tags:
        - 'Following/Followers'
      summary: 'Obtener lista de seguidores'
      description: 'Devuelve la lista de seguidores de un usuario por su UUID.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Información del usuario obtenida exitosamente'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Usuario encontrado exitosamente'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600
    delete:
      tags:
        - 'Following/Followers'
      summary: 'Eliminar un seguidor'
      description: 'Elimina a un usuario de la lista de seguidores.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Seguidor eliminado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Seguidor eliminado exitosamente'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600

  /user/{userUuid}/following:
    get:
      tags:
        - 'Following/Followers'
      summary: 'Obtener lista de seguidos'
      description: 'Devuelve la lista de usuarios seguidos por el usuario por su UUID.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Lista de seguidos obtenida'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Usuario encontrado exitosamente'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600
    put:
      tags:
        - 'Following/Followers'
      summary: 'Agregar o quitar follow a un usuario'
      description: 'Agrega a un usuario a la lista de seguidos.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Usuario seguido exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Usuario seguido exitosamente'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600

  /user/{userUuid}/favorites:
    get:
      tags:
        - 'Following/Followers'
      summary: 'Obtener lista de usuarios favoritos'
      description: 'Devuelve la lista de usuarios favoritos por el usuario por su UUID.'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Lista de seguidos obtenida'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Usuario encontrado exitosamente'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600
    put:
      tags:
        - 'Following/Followers'
      summary: 'Agregar o eliminar a un usuario de favoritos'
      description: 'Agrega o elimina a un usuario de la lista de favoritos mediante su UUID'
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: 12345
      responses:
        '200':
          description: 'Favoritos actualizados exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Favoritos actualizados exitosamente'
                    data:
                      favoritos:
                        - 'user1'
                        - 'user2'
        '404':
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Usuario no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600
  #------------------------ posts Routes ------------------------#

  /posts/feed:
    get:
      tags:
        - 'Posts'
      summary: 'Obtener el feed'
      description: 'Devuelve una lista paginada de posts para el feed del usuario.'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: 'Número de página para la paginación del feed.'
        - name: count
          in: query
          required: false
          schema:
            type: integer
            default: 1
            description: 'Número de página para la paginación del feed.'
      responses:
        '200':
          description: 'Lista de seguidos obtenida'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Feed obtenido exitosamente'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600

  /posts/{postUuid}:
    get:
      tags:
        - 'Posts'
      summary: 'Obtener Un posteo'
      description: 'Devuelve un posteo segun su UUID'
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Posteo obtenido exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Posteo obtenido exitosamente'
                    data:
                      postUuid: 123
                      title: 'Aventuras en la naturaleza'
                      text: '¡Explorando los vastos bosques!'
                      multimediaUrl: 'https://example.com/image.jpg'
                      commentsCount: 5
                      likesCount: 120
                      creationDate: '2021-07-16T19:20:30Z'
        '404':
          description: 'Posteo no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Posteo no encontrado'
                    timestamp: 1633017600
    put:
      tags:
        - 'Posts'
      summary: 'Actualizar un post'
      description: 'Permite al usuario actualizar un post existente.'
      security:
        - bearerAuth: []
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: 'Posteo obtenido exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Posteo obtenido exitosamente'
                    data:
                      postUuid: 123
                      title: 'Aventuras en la naturaleza'
                      text: '¡Explorando los vastos bosques!'
                      multimediaUrl: 'https://example.com/image.jpg'
                      commentsCount: 5
                      likesCount: 120
                      creationDate: '2021-07-16T19:20:30Z'
        '404':
          description: 'Post no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Post no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600
    delete:
      tags:
        - 'Posts'
      summary: 'Eliminar un post'
      description: 'Permite al usuario eliminar un post existente.'
      security:
        - bearerAuth: []
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Post eliminado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
              examples:
                SuccessfulResponse:
                  value:
                    success: true
                    message: 'Post eliminado exitosamente'
        '404':
          description: 'Post no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Post no encontrado'
                    timestamp: 1633017600
        '401':
          description: 'No autorizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnauthorizedExample:
                  value:
                    success: false
                    code: 401
                    message: 'No autorizado'
                    timestamp: 1633017600
